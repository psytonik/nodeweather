#!/usr/bin/env nodeimport {getArgs} from './helpers/args.js';import {printError,printSuccess,printHelp,printWeather} from './services/log.service.js';import {saveKeyValue,TOKEN_DICTIONARY,getKeyValue} from './services/storage.service.js';import {getWeather,getIcon} from './services/apiWeather.service.js';import {getCityByIp} from './services/geoLocation.service.js';const saveToken = async (token)=> {    if(!token.length) {        printError('Please add token')        return;    }    try {        await saveKeyValue(TOKEN_DICTIONARY.token, token);        printSuccess('Token successfully saved');    } catch (e){        printError(e.message, + ' ' + 'Something Went Wrong');    }};const saveCity = async (city) => {    if(!city.length){        printError('Please add city')        return;    }    try {        await saveKeyValue(TOKEN_DICTIONARY.city, city);        printSuccess('City successfully saved');    }catch(error){        printError(error.message, + ' ' + 'Something Went Wrong');    }}const getForecast = async () => {    try {        const city = await getCityByIp();        // const c = city ?? await getKeyValue(TOKEN_DICTIONARY.city);        const c =  await getKeyValue(TOKEN_DICTIONARY.city) ?? city;        const weather = await getWeather(c);        printWeather(weather,getIcon(weather.weather[0].icon));    } catch (error) {        if (error?.response?.status === 404) {            printError(error.response.data.message)        } else if (error?.response?.status === 401) {            printError(error?.response?.data.message)        } else {            printError(error?.message)        }    }}const initCLI = () => {    const args = getArgs(process.argv);    if(args.h) {        // output help        return printHelp();    }    if(args.s){        // save city        return saveCity(args.s);    }    if(args.t){        // token        return saveToken(args.t);    }    /// output weather    return getForecast();}initCLI();